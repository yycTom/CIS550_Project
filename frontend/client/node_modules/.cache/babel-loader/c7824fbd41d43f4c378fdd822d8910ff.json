{"ast":null,"code":"var _jsxFileName = \"/Users/yangyuchen/Desktop/CIS550 Project/CIS550_Project/frontend/client/src/components/COVID19_world_map.js\";\nimport React, { Component } from 'react';\nimport PageNavbar from \"./PageNavbar\";\nimport { MapContainer, GeoJSON, Popup, Marker, TileLayer } from 'react-leaflet';\nimport GeojsonData from './../countries.json';\nimport 'leaflet/dist/leaflet.css';\nimport '../style/COVID19_world_map.css';\nimport L from 'leaflet';\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n});\nexport default class COVID19_world_map extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      toggleCountryFlag: false,\n      center: [50, -42],\n      // center of the map, we should set it as a country's location\n      countryName: '',\n      date: '',\n      color: ['#F7C7C7', '#FFBFBF', '#FF8080', '#E75858', '#FF4040', '#FF0000', '#BF0000', '#701010'],\n      hashMap: new Map(),\n      // key is each country's name, value is a list[confirmed, death, recovered]\n      colorPeriod: [],\n      hashMapCountryColor: new Map(),\n      flag: false,\n      markers: new Map(),\n      countries: []\n    };\n    this.onEachCountry = this.onEachCountry.bind(this); // this.onCountryMouseover = this.onCountryMouseover.bind(this)\n\n    this.handleCountryNameChange = this.handleCountryNameChange.bind(this);\n    this.handleSearch = this.handleSearch.bind(this); // this.helpUpdatePage = this.helpUpdatePage.bind(this)\n  }\n\n  componentDidMount() {\n    fetch(\"http://localhost:8081/covid19_world_map\", {\n      match: \"GET\"\n    }).then(res => res.json()).then(results => {\n      var map = results[0];\n      var locations = results[1];\n      var updatedHashMap = new Map();\n\n      for (var i = 0; i < map.length; i++) {\n        var tmpList = [];\n        tmpList.push(map[i].confirmed);\n        tmpList.push(map[i].death);\n        tmpList.push(map[i].recovered);\n        tmpList.push(6);\n        updatedHashMap.set(map[i].country, tmpList);\n      }\n\n      var updatedColorPeriod = [];\n      var min = 0;\n      var max = 0;\n\n      for (var i = 0; i < map.length; i++) {\n        min = Math.min(min, map[i].confirmed);\n        max = Math.max(max, map[i].confirmed);\n      }\n\n      for (var i = 0; i < 10; i++) {\n        updatedColorPeriod.push(min + i / 9 * (max - min));\n      }\n\n      var updatedLocations = new Map();\n      var updatedCountries = [];\n\n      for (i = 0; i < locations.length; i++) {\n        var tmp = [];\n        tmp.push(locations[i].latitude);\n        tmp.push(locations[i].longitude);\n        updatedLocations.set(locations[i].country, tmp);\n        updatedCountries.push(locations[i].country);\n      }\n\n      this.setState({\n        hashMap: updatedHashMap,\n        colorPeriod: updatedColorPeriod,\n        flag: true,\n        markers: updatedLocations,\n        countries: updatedCountries\n      });\n      console.log(this.state.markers);\n    });\n  }\n\n  onEachCountry(country, layer) {\n    // const countryName = country.properties.ADMIN\n    // if (this.state.hashMap.has(countryName)) {\n    //     layer.bindPopup(this.state.hashMap.get(countryName)[0])\n    // }\n    // // layer.options.fillColor = this.state.color[3]\n    // console.log(layer.on)\n    // layer.on({\n    //     mousedown: (event)=>{\n    //         event.target.setStyle({\n    //             color : this.state.color[3],\n    //             fillColor : this.state.color[3],\n    //         })\n    //     }\n    // })\n    const name = country.properties.ADMIN;\n    layer.bindPopup(name);\n  }\n\n  handleCountryNameChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  handleSearch() {\n    fetch(\"http://localhost:8081/covid19_world_map\", {\n      match: \"GET\"\n    }).then(res => res.json()).then(map => {\n      var updatedHashMap = new Map();\n\n      for (var i = 0; i < map.length; i++) {\n        var tmpList = [];\n        tmpList.push(map[i].confirmed);\n        tmpList.push(map[i].death);\n        tmpList.push(map[i].recovered);\n        tmpList.push(6);\n        updatedHashMap.set(map[i].country, tmpList);\n      }\n\n      var updatedColorPeriod = [];\n      var min = 0;\n      var max = 0;\n\n      for (var i = 0; i < map.length; i++) {\n        min = Math.min(min, map[i].confirmed);\n        max = Math.max(max, map[i].confirmed);\n      }\n\n      for (var i = 0; i < 10; i++) {\n        updatedColorPeriod.push(min + i / 9 * (max - min));\n      }\n\n      this.setState({\n        hashMap: updatedHashMap,\n        colorPeriod: updatedColorPeriod,\n        flag: true\n      });\n    });\n    this.setState({\n      center: []\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(PageNavbar, {\n      active: \"covid19_world_map\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(MapContainer, {\n      style: {\n        height: \"100vh\"\n      },\n      zoom: 2,\n      center: this.state.center,\n      scrollWheelZoom: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"searchBar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"countryName\",\n      placeholder: \"Country name\",\n      onChange: this.handleCountryNameChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"date\",\n      placeholder: \"Date, e.g. 9/30/20\",\n      onChange: this.handleCountryNameChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleSearch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 21\n      }\n    }, \"Search\")), /*#__PURE__*/React.createElement(GeoJSON, {\n      data: GeojsonData,\n      onEachFeature: this.onEachCountry,\n      style: {\n        fillColor: 'white',\n        weight: 1,\n        color: 'black',\n        fillOpacity: 1\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }\n    }), this.state.countries.map((ele, idx) => {\n      /*#__PURE__*/\n      React.createElement(Marker, {\n        key: idx,\n        position: this.state.markers.get(ele),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Popup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 25\n        }\n      }, ele));\n    })));\n  }\n\n} // {() => ({\n//                         color: '#4a83ec',\n//                         weight: 0.5,\n//                         fillColor: \"white\",\n//                         fillOpacity: 1,\n//                         })}","map":{"version":3,"sources":["/Users/yangyuchen/Desktop/CIS550 Project/CIS550_Project/frontend/client/src/components/COVID19_world_map.js"],"names":["React","Component","PageNavbar","MapContainer","GeoJSON","Popup","Marker","TileLayer","GeojsonData","L","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","COVID19_world_map","constructor","props","state","toggleCountryFlag","center","countryName","date","color","hashMap","Map","colorPeriod","hashMapCountryColor","flag","markers","countries","onEachCountry","bind","handleCountryNameChange","handleSearch","componentDidMount","fetch","match","then","res","json","results","map","locations","updatedHashMap","i","length","tmpList","push","confirmed","death","recovered","set","country","updatedColorPeriod","min","max","Math","updatedLocations","updatedCountries","tmp","latitude","longitude","setState","console","log","layer","name","properties","ADMIN","bindPopup","event","target","value","render","height","fillColor","weight","fillOpacity","ele","idx","get"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport PageNavbar from \"./PageNavbar\";\nimport {MapContainer, GeoJSON, Popup, Marker, TileLayer} from 'react-leaflet'\nimport GeojsonData from './../countries.json'\nimport 'leaflet/dist/leaflet.css'\nimport '../style/COVID19_world_map.css'\nimport L from 'leaflet';\n\ndelete L.Icon.Default.prototype._getIconUrl;\n\nL.Icon.Default.mergeOptions({\n    iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n    iconUrl: require('leaflet/dist/images/marker-icon.png'),\n    shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n});\nexport default class COVID19_world_map extends Component {\n    constructor(props){\n        super()\n        this.state = {\n            toggleCountryFlag : false,\n            center : [50, -42], // center of the map, we should set it as a country's location\n            countryName: '',\n            date: '',\n            color: ['#F7C7C7', '#FFBFBF', '#FF8080', '#E75858','#FF4040', '#FF0000', '#BF0000', '#701010'],\n            hashMap: new Map(), // key is each country's name, value is a list[confirmed, death, recovered]\n            colorPeriod:[],\n            hashMapCountryColor: new Map(),\n            flag : false,\n            markers: new Map(),\n            countries: []\n        }\n        this.onEachCountry = this.onEachCountry.bind(this)\n        // this.onCountryMouseover = this.onCountryMouseover.bind(this)\n        this.handleCountryNameChange = this.handleCountryNameChange.bind(this)\n        this.handleSearch = this.handleSearch.bind(this)\n        // this.helpUpdatePage = this.helpUpdatePage.bind(this)\n    }\n\n    componentDidMount() {\n        fetch(\"http://localhost:8081/covid19_world_map\", {match : \"GET\"})\n        .then((res)=>res.json())\n        .then((results)=>{\n            var map = results[0]\n            var locations = results[1]\n            \n            var updatedHashMap = new Map()\n            for (var i = 0; i < map.length; i++) {\n                var tmpList = []\n                tmpList.push(map[i].confirmed)\n                tmpList.push(map[i].death)\n                tmpList.push(map[i].recovered)\n                tmpList.push(6)\n                updatedHashMap.set(map[i].country, tmpList)\n            }\n            var updatedColorPeriod = []\n            var min = 0;\n            var max = 0;\n            for (var i = 0; i < map.length; i++) {\n                min = Math.min(min, map[i].confirmed)\n                max = Math.max(max, map[i].confirmed)\n            }\n            for (var i = 0; i < 10; i++) {\n                updatedColorPeriod.push(min + i / 9 * (max - min))\n            }\n            \n           \n            var updatedLocations = new Map()\n            var updatedCountries = []\n            for (i = 0; i < locations.length; i++) {\n                var tmp = []\n                tmp.push(locations[i].latitude)\n                tmp.push(locations[i].longitude)\n                updatedLocations.set(locations[i].country, tmp)\n                updatedCountries.push(locations[i].country)\n            }\n            this.setState({\n                hashMap : updatedHashMap,\n                colorPeriod : updatedColorPeriod,\n                flag : true,\n                markers : updatedLocations,\n                countries : updatedCountries\n            })\n             console.log(this.state.markers)\n        })\n    }\n\n    onEachCountry(country, layer){\n        // const countryName = country.properties.ADMIN\n        // if (this.state.hashMap.has(countryName)) {\n        //     layer.bindPopup(this.state.hashMap.get(countryName)[0])\n        // }\n        // // layer.options.fillColor = this.state.color[3]\n        // console.log(layer.on)\n        // layer.on({\n        //     mousedown: (event)=>{\n        //         event.target.setStyle({\n        //             color : this.state.color[3],\n        //             fillColor : this.state.color[3],\n\n        //         })\n        //     }\n        // })\n        const name = country.properties.ADMIN\n        layer.bindPopup(name)\n      \n    }\n\n    handleCountryNameChange(event){\n        this.setState({\n            [event.target.name] : event.target.value\n        })\n    }\n\n    handleSearch(){\n        fetch(\"http://localhost:8081/covid19_world_map\", {match : \"GET\"})\n        .then((res)=>res.json())\n        .then((map)=>{\n            var updatedHashMap = new Map()\n            for (var i = 0; i < map.length; i++) {\n                var tmpList = []\n                tmpList.push(map[i].confirmed)\n                tmpList.push(map[i].death)\n                tmpList.push(map[i].recovered)\n                tmpList.push(6)\n                updatedHashMap.set(map[i].country, tmpList)\n            }\n            var updatedColorPeriod = []\n            var min = 0;\n            var max = 0;\n            for (var i = 0; i < map.length; i++) {\n                min = Math.min(min, map[i].confirmed)\n                max = Math.max(max, map[i].confirmed)\n            }\n            for (var i = 0; i < 10; i++) {\n                updatedColorPeriod.push(min + i / 9 * (max - min))\n            }\n            this.setState({\n                hashMap : updatedHashMap,\n                colorPeriod : updatedColorPeriod,\n                flag : true\n            })\n        })\n\n        this.setState({\n            center : []\n        })\n    }\n    \n    render() {\n        return ( \n            <div > \n                <PageNavbar active='covid19_world_map'/>\n                <MapContainer style={{height:\"100vh\"}} zoom={2} center={this.state.center} scrollWheelZoom={false}>\n                <div className='searchBar'>\n                    <input type='text' name=\"countryName\" placeholder=\"Country name\" onChange={this.handleCountryNameChange}></input>\n                    <input type='text' name=\"date\" placeholder=\"Date, e.g. 9/30/20\" onChange={this.handleCountryNameChange}></input>\n                    <button onClick={this.handleSearch}>Search</button>\n                </div>  \n\n                <GeoJSON \n                    data={GeojsonData}\n                    onEachFeature = {this.onEachCountry}\n                    style = {{\n                        fillColor: 'white',\n                        weight:1,\n                        color: 'black',\n                        fillOpacity:1\n                    }}\n                />\n                 {/* <TileLayer attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' \n                 url=\"http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                 /> */}\n                    {this.state.countries.map((ele, idx)=>{\n                    <Marker key = {idx} position = {this.state.markers.get(ele)}>\n                        <Popup>\n                            {ele}\n                        </Popup>\n                    </Marker>\n                })}\n                </MapContainer>\n            </div>\n        )\n    }\n}\n\n\n// {() => ({\n//                         color: '#4a83ec',\n//                         weight: 0.5,\n//                         fillColor: \"white\",\n//                         fillOpacity: 1,\n//                         })}"]},"metadata":{},"sourceType":"module"}