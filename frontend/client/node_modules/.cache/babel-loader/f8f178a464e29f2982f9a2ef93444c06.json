{"ast":null,"code":"var _jsxFileName = \"/Users/yangyuchen/Desktop/CIS550 Project/CIS550_Project/frontend/client/src/components/COVID19_world_map.js\";\nimport React, { Component } from 'react';\nimport PageNavbar from \"./PageNavbar\";\nimport { MapContainer, GeoJSON, Popup, Marker, TileLayer } from 'react-leaflet';\nimport GeojsonData from './../countries.json';\nimport 'leaflet/dist/leaflet.css';\nimport '../style/COVID19_world_map.css';\nexport default class COVID19_world_map extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      toggleCountryFlag: false,\n      center: [50, -42],\n      // center of the map, we should set it as a country's location\n      countryName: '',\n      date: '',\n      color: ['#F7C7C7', '#FFBFBF', '#FF8080', '#FF4040', 'FF0000', 'BF0000', '#701010'],\n      hashMap: new Map()\n    };\n    this.onEachCountry = this.onEachCountry.bind(this); // this.onCountryMouseover = this.onCountryMouseover.bind(this)\n\n    this.handleCountryNameChange = this.handleCountryNameChange.bind(this);\n    this.handleSearch = this.handleSearch.bind(this);\n    this.componentDidMount = this.componentDidMount(this);\n  }\n\n  componentDidMount() {\n    fetch(\"http://localhost:8081/covid19_world_map\", {\n      match: \"GET\"\n    }).then(res => res.json()).then(map => {\n      console.log(map[0]);\n      var updatedHashMap = new Map();\n\n      for (var i = 0; i < map.length; i++) {\n        var tmpList = [];\n        tmpList.push(map.confirmed);\n        tmpList.push(map.death);\n        tmpList.push(map.recovered);\n        updatedHashMap.set(map[0].country, tmpList);\n      }\n\n      this.setState({\n        hashMap: updatedHashMap\n      });\n    });\n  }\n\n  onEachCountry(country, layer) {\n    const countryName = country.properties.ADMIN;\n    layer.bindPopup(countryName);\n    layer.on({\n      click: this.onCountryMouseover\n    });\n    const colorIndex = Math.floor(Math.random() * 7);\n    layer.options.fillColor = this.state.color[colorIndex];\n  } // onCountryMouseover(event) {\n  //     event.target.setStyle({\n  //         color:'green',\n  //         fillColor: 'yellow'\n  //     })\n  // }\n\n\n  handleCountryNameChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n    console.log(event.target.change);\n    console.log(this.state.date);\n  }\n\n  handleSearch() {\n    this.setState({\n      center: []\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(PageNavbar, {\n      active: \"covid19_world_map\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(MapContainer, {\n      style: {\n        height: \"100vh\"\n      },\n      zoom: 3,\n      center: this.state.center,\n      scrollWheelZoom: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"searchBar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"countryName\",\n      placeholder: \"Country name\",\n      onChange: this.handleCountryNameChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"date\",\n      placeholder: \"Date, e.g. 9/30/20\",\n      onChange: this.handleCountryNameChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleSearch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }\n    }, \"Search\")), /*#__PURE__*/React.createElement(GeoJSON, {\n      data: GeojsonData.features,\n      style: () => ({\n        color: '#4a83ec',\n        weight: 0.5,\n        fillColor: \"#1a1d62\",\n        fillOpacity: 1\n      }),\n      onEachFeature: this.onEachCountry,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/yangyuchen/Desktop/CIS550 Project/CIS550_Project/frontend/client/src/components/COVID19_world_map.js"],"names":["React","Component","PageNavbar","MapContainer","GeoJSON","Popup","Marker","TileLayer","GeojsonData","COVID19_world_map","constructor","props","state","toggleCountryFlag","center","countryName","date","color","hashMap","Map","onEachCountry","bind","handleCountryNameChange","handleSearch","componentDidMount","fetch","match","then","res","json","map","console","log","updatedHashMap","i","length","tmpList","push","confirmed","death","recovered","set","country","setState","layer","properties","ADMIN","bindPopup","on","click","onCountryMouseover","colorIndex","Math","floor","random","options","fillColor","event","target","name","value","change","render","height","features","weight","fillOpacity"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport PageNavbar from \"./PageNavbar\";\nimport {MapContainer, GeoJSON, Popup, Marker, TileLayer} from 'react-leaflet'\nimport GeojsonData from './../countries.json'\nimport 'leaflet/dist/leaflet.css'\nimport '../style/COVID19_world_map.css'\nexport default class COVID19_world_map extends Component {\n    constructor(props){\n        super()\n        this.state = {\n            toggleCountryFlag : false,\n            center : [50, -42], // center of the map, we should set it as a country's location\n            countryName: '',\n            date: '',\n            color: ['#F7C7C7', '#FFBFBF', '#FF8080', '#FF4040', 'FF0000', 'BF0000', '#701010'],\n            hashMap: new Map()\n        }\n        this.onEachCountry = this.onEachCountry.bind(this)\n        // this.onCountryMouseover = this.onCountryMouseover.bind(this)\n        this.handleCountryNameChange = this.handleCountryNameChange.bind(this)\n        this.handleSearch = this.handleSearch.bind(this)\n        this.componentDidMount = this.componentDidMount(this)\n    }\n\n    componentDidMount() {\n        fetch(\"http://localhost:8081/covid19_world_map\", {match : \"GET\"})\n        .then((res)=>res.json())\n        .then((map)=>{\n            console.log(map[0])\n            var updatedHashMap = new Map()\n            for (var i = 0; i < map.length; i++) {\n                var tmpList = []\n                tmpList.push(map.confirmed)\n                tmpList.push(map.death)\n                tmpList.push(map.recovered)\n                updatedHashMap.set(map[0].country, tmpList)\n            }\n            this.setState({\n                hashMap : updatedHashMap\n            })\n        })\n    }\n\n    onEachCountry(country, layer){\n        const countryName = country.properties.ADMIN\n        layer.bindPopup(countryName)\n        layer.on({\n            click: this.onCountryMouseover\n        })\n        const colorIndex = Math.floor(Math.random()*7);\n        layer.options.fillColor = this.state.color[colorIndex]\n    }\n\n    // onCountryMouseover(event) {\n    //     event.target.setStyle({\n    //         color:'green',\n    //         fillColor: 'yellow'\n    //     })\n    // }\n\n    handleCountryNameChange(event){\n        this.setState({\n            [event.target.name] : event.target.value\n        })\n        console.log(event.target.change)\n        console.log(this.state.date)\n    }\n\n    handleSearch(){\n        this.setState({\n            center : []\n        })\n    }\n    \n    render() {\n        return ( \n            <div> \n                <PageNavbar active='covid19_world_map'/>\n                <MapContainer style={{height:\"100vh\"}} zoom={3} center={this.state.center} scrollWheelZoom={false}>\n                <div className='searchBar'>\n                    <input type='text' name=\"countryName\" placeholder=\"Country name\" onChange={this.handleCountryNameChange}></input>\n                    <input type='text' name=\"date\" placeholder=\"Date, e.g. 9/30/20\" onChange={this.handleCountryNameChange}></input>\n                    <button onClick={this.handleSearch}>Search</button>\n                </div>  \n                    <GeoJSON \n                        data={GeojsonData.features}\n                        style={() => ({\n                        color: '#4a83ec',\n                        weight: 0.5,\n                        fillColor: \"#1a1d62\",\n                        fillOpacity: 1,\n                        })}\n                        onEachFeature = {this.onEachCountry}\n                    />\n                    \n                </MapContainer>\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}