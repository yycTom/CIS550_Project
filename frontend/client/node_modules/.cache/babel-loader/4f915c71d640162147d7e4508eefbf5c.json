{"ast":null,"code":"var _jsxFileName = \"/Users/yangyuchen/Desktop/CIS550 Project/CIS550_Project/frontend/client/src/components/COVID19_world_map.js\";\nimport React, { Component } from 'react';\nimport PageNavbar from \"./PageNavbar\";\nimport { MapContainer, GeoJSON, Popup, Marker, TileLayer } from 'react-leaflet';\nimport GeojsonData from './../countries.json';\nimport 'leaflet/dist/leaflet.css';\nimport '../style/COVID19_world_map.css';\nexport default class COVID19_world_map extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      toggleCountryFlag: false,\n      center: [50, -42],\n      // center of the map, we should set it as a country's location\n      countryName: '',\n      date: '',\n      color: ['#F7C7C7', '#FFBFBF', '#FF8080', '#E75858', '#FF4040', '#FF0000', '#BF0000', '#701010'],\n      hashMap: new Map(),\n      // key is each country's name, value is a list[confirmed, death, recovered]\n      colorPeriod: [],\n      hashMapCountryColor: new Map(),\n      flag: false\n    };\n    this.onEachCountry = this.onEachCountry.bind(this); // this.onCountryMouseover = this.onCountryMouseover.bind(this)\n\n    this.handleCountryNameChange = this.handleCountryNameChange.bind(this);\n    this.handleSearch = this.handleSearch.bind(this); // this.helpUpdatePage = this.helpUpdatePage.bind(this)\n  }\n\n  componentDidMount() {\n    fetch(\"http://localhost:8081/covid19_world_map\", {\n      match: \"GET\"\n    }).then(res => res.json()).then(map => {\n      var updatedHashMap = new Map();\n\n      for (var i = 0; i < map.length; i++) {\n        var tmpList = [];\n        tmpList.push(map[i].confirmed);\n        tmpList.push(map[i].death);\n        tmpList.push(map[i].recovered);\n        tmpList.push(6);\n        updatedHashMap.set(map[i].country, tmpList);\n      }\n\n      var updatedColorPeriod = [];\n      var min = 0;\n      var max = 0;\n\n      for (var i = 0; i < map.length; i++) {\n        min = Math.min(min, map[i].confirmed);\n        max = Math.max(max, map[i].confirmed);\n      }\n\n      for (var i = 0; i < 10; i++) {\n        updatedColorPeriod.push(min + i / 9 * (max - min));\n      }\n\n      this.setState({\n        hashMap: updatedHashMap,\n        colorPeriod: updatedColorPeriod,\n        flag: true\n      });\n    });\n  }\n\n  onEachCountry(country, layer) {\n    const countryName = country.properties.ADMIN;\n\n    if (this.state.hashMap.has(countryName)) {\n      layer.bindPopup(this.state.hashMap.get(countryName)[0]);\n    } // layer.options.fillColor = this.state.color[3]\n\n\n    console.log(layer.on);\n    layer.on({\n      mousedown: event => {\n        event.target.setStyle({\n          color: this.state.color[3],\n          fillColor: this.state.color[3]\n        });\n      }\n    });\n  }\n\n  handleCountryNameChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  handleSearch() {\n    fetch(\"http://localhost:8081/covid19_world_map\", {\n      match: \"GET\"\n    }).then(res => res.json()).then(map => {\n      var updatedHashMap = new Map();\n\n      for (var i = 0; i < map.length; i++) {\n        var tmpList = [];\n        tmpList.push(map[i].confirmed);\n        tmpList.push(map[i].death);\n        tmpList.push(map[i].recovered);\n        tmpList.push(6);\n        updatedHashMap.set(map[i].country, tmpList);\n      }\n\n      var updatedColorPeriod = [];\n      var min = 0;\n      var max = 0;\n\n      for (var i = 0; i < map.length; i++) {\n        min = Math.min(min, map[i].confirmed);\n        max = Math.max(max, map[i].confirmed);\n      }\n\n      for (var i = 0; i < 10; i++) {\n        updatedColorPeriod.push(min + i / 9 * (max - min));\n      }\n\n      this.setState({\n        hashMap: updatedHashMap,\n        colorPeriod: updatedColorPeriod,\n        flag: true\n      });\n    });\n    this.setState({\n      center: []\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(PageNavbar, {\n      active: \"covid19_world_map\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(MapContainer, {\n      style: {\n        height: \"100vh\"\n      },\n      zoom: 3,\n      center: this.state.center,\n      scrollWheelZoom: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"searchBar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"countryName\",\n      placeholder: \"Country name\",\n      onChange: this.handleCountryNameChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"date\",\n      placeholder: \"Date, e.g. 9/30/20\",\n      onChange: this.handleCountryNameChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleSearch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 21\n      }\n    }, \"Search\")), /*#__PURE__*/React.createElement(GeoJSON, {\n      onEachFeature: this.onEachCountry,\n      data: GeojsonData.features,\n      style: () => ({\n        color: '#4a83ec',\n        weight: 0.5,\n        fillColor: \"white\",\n        fillOpacity: 1\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/yangyuchen/Desktop/CIS550 Project/CIS550_Project/frontend/client/src/components/COVID19_world_map.js"],"names":["React","Component","PageNavbar","MapContainer","GeoJSON","Popup","Marker","TileLayer","GeojsonData","COVID19_world_map","constructor","props","state","toggleCountryFlag","center","countryName","date","color","hashMap","Map","colorPeriod","hashMapCountryColor","flag","onEachCountry","bind","handleCountryNameChange","handleSearch","componentDidMount","fetch","match","then","res","json","map","updatedHashMap","i","length","tmpList","push","confirmed","death","recovered","set","country","updatedColorPeriod","min","max","Math","setState","layer","properties","ADMIN","has","bindPopup","get","console","log","on","mousedown","event","target","setStyle","fillColor","name","value","render","height","features","weight","fillOpacity"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAAQC,YAAR,EAAsBC,OAAtB,EAA+BC,KAA/B,EAAsCC,MAAtC,EAA8CC,SAA9C,QAA8D,eAA9D;AACA,OAAOC,WAAP,MAAwB,qBAAxB;AACA,OAAO,0BAAP;AACA,OAAO,gCAAP;AACA,eAAe,MAAMC,iBAAN,SAAgCR,SAAhC,CAA0C;AACrDS,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,iBAAiB,EAAG,KADX;AAETC,MAAAA,MAAM,EAAG,CAAC,EAAD,EAAK,CAAC,EAAN,CAFA;AAEW;AACpBC,MAAAA,WAAW,EAAE,EAHJ;AAITC,MAAAA,IAAI,EAAE,EAJG;AAKTC,MAAAA,KAAK,EAAE,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,EAA4C,SAA5C,EAAuD,SAAvD,EAAkE,SAAlE,EAA6E,SAA7E,CALE;AAMTC,MAAAA,OAAO,EAAE,IAAIC,GAAJ,EANA;AAMW;AACpBC,MAAAA,WAAW,EAAC,EAPH;AAQTC,MAAAA,mBAAmB,EAAE,IAAIF,GAAJ,EARZ;AASTG,MAAAA,IAAI,EAAG;AATE,KAAb;AAWA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAArB,CAbc,CAcd;;AACA,SAAKC,uBAAL,GAA+B,KAAKA,uBAAL,CAA6BD,IAA7B,CAAkC,IAAlC,CAA/B;AACA,SAAKE,YAAL,GAAoB,KAAKA,YAAL,CAAkBF,IAAlB,CAAuB,IAAvB,CAApB,CAhBc,CAiBd;AACH;;AAEDG,EAAAA,iBAAiB,GAAG;AAChBC,IAAAA,KAAK,CAAC,yCAAD,EAA4C;AAACC,MAAAA,KAAK,EAAG;AAAT,KAA5C,CAAL,CACCC,IADD,CACOC,GAAD,IAAOA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEOG,GAAD,IAAO;AACT,UAAIC,cAAc,GAAG,IAAIf,GAAJ,EAArB;;AACA,WAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAAG,CAACG,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACjC,YAAIE,OAAO,GAAG,EAAd;AACAA,QAAAA,OAAO,CAACC,IAAR,CAAaL,GAAG,CAACE,CAAD,CAAH,CAAOI,SAApB;AACAF,QAAAA,OAAO,CAACC,IAAR,CAAaL,GAAG,CAACE,CAAD,CAAH,CAAOK,KAApB;AACAH,QAAAA,OAAO,CAACC,IAAR,CAAaL,GAAG,CAACE,CAAD,CAAH,CAAOM,SAApB;AACAJ,QAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACAJ,QAAAA,cAAc,CAACQ,GAAf,CAAmBT,GAAG,CAACE,CAAD,CAAH,CAAOQ,OAA1B,EAAmCN,OAAnC;AACH;;AACD,UAAIO,kBAAkB,GAAG,EAAzB;AACA,UAAIC,GAAG,GAAG,CAAV;AACA,UAAIC,GAAG,GAAG,CAAV;;AACA,WAAK,IAAIX,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAAG,CAACG,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACjCU,QAAAA,GAAG,GAAGE,IAAI,CAACF,GAAL,CAASA,GAAT,EAAcZ,GAAG,CAACE,CAAD,CAAH,CAAOI,SAArB,CAAN;AACAO,QAAAA,GAAG,GAAGC,IAAI,CAACD,GAAL,CAASA,GAAT,EAAcb,GAAG,CAACE,CAAD,CAAH,CAAOI,SAArB,CAAN;AACH;;AACD,WAAK,IAAIJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzBS,QAAAA,kBAAkB,CAACN,IAAnB,CAAwBO,GAAG,GAAGV,CAAC,GAAG,CAAJ,IAASW,GAAG,GAAGD,GAAf,CAA9B;AACH;;AACD,WAAKG,QAAL,CAAc;AACV9B,QAAAA,OAAO,EAAGgB,cADA;AAEVd,QAAAA,WAAW,EAAGwB,kBAFJ;AAGVtB,QAAAA,IAAI,EAAG;AAHG,OAAd;AAKH,KA3BD;AA4BH;;AAEDC,EAAAA,aAAa,CAACoB,OAAD,EAAUM,KAAV,EAAgB;AACzB,UAAMlC,WAAW,GAAG4B,OAAO,CAACO,UAAR,CAAmBC,KAAvC;;AACA,QAAI,KAAKvC,KAAL,CAAWM,OAAX,CAAmBkC,GAAnB,CAAuBrC,WAAvB,CAAJ,EAAyC;AACrCkC,MAAAA,KAAK,CAACI,SAAN,CAAgB,KAAKzC,KAAL,CAAWM,OAAX,CAAmBoC,GAAnB,CAAuBvC,WAAvB,EAAoC,CAApC,CAAhB;AACH,KAJwB,CAKzB;;;AACAwC,IAAAA,OAAO,CAACC,GAAR,CAAYP,KAAK,CAACQ,EAAlB;AACAR,IAAAA,KAAK,CAACQ,EAAN,CAAS;AACLC,MAAAA,SAAS,EAAGC,KAAD,IAAS;AAChBA,QAAAA,KAAK,CAACC,MAAN,CAAaC,QAAb,CAAsB;AAClB5C,UAAAA,KAAK,EAAG,KAAKL,KAAL,CAAWK,KAAX,CAAiB,CAAjB,CADU;AAElB6C,UAAAA,SAAS,EAAG,KAAKlD,KAAL,CAAWK,KAAX,CAAiB,CAAjB;AAFM,SAAtB;AAKH;AAPI,KAAT;AASH;;AAEDQ,EAAAA,uBAAuB,CAACkC,KAAD,EAAO;AAC1B,SAAKX,QAAL,CAAc;AACV,OAACW,KAAK,CAACC,MAAN,CAAaG,IAAd,GAAsBJ,KAAK,CAACC,MAAN,CAAaI;AADzB,KAAd;AAGH;;AAEDtC,EAAAA,YAAY,GAAE;AACVE,IAAAA,KAAK,CAAC,yCAAD,EAA4C;AAACC,MAAAA,KAAK,EAAG;AAAT,KAA5C,CAAL,CACCC,IADD,CACOC,GAAD,IAAOA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEOG,GAAD,IAAO;AACT,UAAIC,cAAc,GAAG,IAAIf,GAAJ,EAArB;;AACA,WAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAAG,CAACG,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACjC,YAAIE,OAAO,GAAG,EAAd;AACAA,QAAAA,OAAO,CAACC,IAAR,CAAaL,GAAG,CAACE,CAAD,CAAH,CAAOI,SAApB;AACAF,QAAAA,OAAO,CAACC,IAAR,CAAaL,GAAG,CAACE,CAAD,CAAH,CAAOK,KAApB;AACAH,QAAAA,OAAO,CAACC,IAAR,CAAaL,GAAG,CAACE,CAAD,CAAH,CAAOM,SAApB;AACAJ,QAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACAJ,QAAAA,cAAc,CAACQ,GAAf,CAAmBT,GAAG,CAACE,CAAD,CAAH,CAAOQ,OAA1B,EAAmCN,OAAnC;AACH;;AACD,UAAIO,kBAAkB,GAAG,EAAzB;AACA,UAAIC,GAAG,GAAG,CAAV;AACA,UAAIC,GAAG,GAAG,CAAV;;AACA,WAAK,IAAIX,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAAG,CAACG,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACjCU,QAAAA,GAAG,GAAGE,IAAI,CAACF,GAAL,CAASA,GAAT,EAAcZ,GAAG,CAACE,CAAD,CAAH,CAAOI,SAArB,CAAN;AACAO,QAAAA,GAAG,GAAGC,IAAI,CAACD,GAAL,CAASA,GAAT,EAAcb,GAAG,CAACE,CAAD,CAAH,CAAOI,SAArB,CAAN;AACH;;AACD,WAAK,IAAIJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzBS,QAAAA,kBAAkB,CAACN,IAAnB,CAAwBO,GAAG,GAAGV,CAAC,GAAG,CAAJ,IAASW,GAAG,GAAGD,GAAf,CAA9B;AACH;;AACD,WAAKG,QAAL,CAAc;AACV9B,QAAAA,OAAO,EAAGgB,cADA;AAEVd,QAAAA,WAAW,EAAGwB,kBAFJ;AAGVtB,QAAAA,IAAI,EAAG;AAHG,OAAd;AAKH,KA3BD;AA6BA,SAAK0B,QAAL,CAAc;AACVlC,MAAAA,MAAM,EAAG;AADC,KAAd;AAGH;;AAEDmD,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,UAAD;AAAY,MAAA,MAAM,EAAC,mBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI,oBAAC,YAAD;AAAc,MAAA,KAAK,EAAE;AAACC,QAAAA,MAAM,EAAC;AAAR,OAArB;AAAuC,MAAA,IAAI,EAAE,CAA7C;AAAgD,MAAA,MAAM,EAAE,KAAKtD,KAAL,CAAWE,MAAnE;AAA2E,MAAA,eAAe,EAAE,KAA5F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,aAAxB;AAAsC,MAAA,WAAW,EAAC,cAAlD;AAAiE,MAAA,QAAQ,EAAE,KAAKW,uBAAhF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,MAAxB;AAA+B,MAAA,WAAW,EAAC,oBAA3C;AAAgE,MAAA,QAAQ,EAAE,KAAKA,uBAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,eAGI;AAAQ,MAAA,OAAO,EAAE,KAAKC,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,CADA,eAMI,oBAAC,OAAD;AACI,MAAA,aAAa,EAAI,KAAKH,aAD1B;AAEI,MAAA,IAAI,EAAEf,WAAW,CAAC2D,QAFtB;AAGI,MAAA,KAAK,EAAE,OAAO;AACdlD,QAAAA,KAAK,EAAE,SADO;AAEdmD,QAAAA,MAAM,EAAE,GAFM;AAGdN,QAAAA,SAAS,EAAE,OAHG;AAIdO,QAAAA,WAAW,EAAE;AAJC,OAAP,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANJ,CAFJ,CADJ;AAwBH;;AAxIoD","sourcesContent":["import React, { Component } from 'react'\nimport PageNavbar from \"./PageNavbar\";\nimport {MapContainer, GeoJSON, Popup, Marker, TileLayer} from 'react-leaflet'\nimport GeojsonData from './../countries.json'\nimport 'leaflet/dist/leaflet.css'\nimport '../style/COVID19_world_map.css'\nexport default class COVID19_world_map extends Component {\n    constructor(props){\n        super()\n        this.state = {\n            toggleCountryFlag : false,\n            center : [50, -42], // center of the map, we should set it as a country's location\n            countryName: '',\n            date: '',\n            color: ['#F7C7C7', '#FFBFBF', '#FF8080', '#E75858','#FF4040', '#FF0000', '#BF0000', '#701010'],\n            hashMap: new Map(), // key is each country's name, value is a list[confirmed, death, recovered]\n            colorPeriod:[],\n            hashMapCountryColor: new Map(),\n            flag : false\n        }\n        this.onEachCountry = this.onEachCountry.bind(this)\n        // this.onCountryMouseover = this.onCountryMouseover.bind(this)\n        this.handleCountryNameChange = this.handleCountryNameChange.bind(this)\n        this.handleSearch = this.handleSearch.bind(this)\n        // this.helpUpdatePage = this.helpUpdatePage.bind(this)\n    }\n\n    componentDidMount() {\n        fetch(\"http://localhost:8081/covid19_world_map\", {match : \"GET\"})\n        .then((res)=>res.json())\n        .then((map)=>{\n            var updatedHashMap = new Map()\n            for (var i = 0; i < map.length; i++) {\n                var tmpList = []\n                tmpList.push(map[i].confirmed)\n                tmpList.push(map[i].death)\n                tmpList.push(map[i].recovered)\n                tmpList.push(6)\n                updatedHashMap.set(map[i].country, tmpList)\n            }\n            var updatedColorPeriod = []\n            var min = 0;\n            var max = 0;\n            for (var i = 0; i < map.length; i++) {\n                min = Math.min(min, map[i].confirmed)\n                max = Math.max(max, map[i].confirmed)\n            }\n            for (var i = 0; i < 10; i++) {\n                updatedColorPeriod.push(min + i / 9 * (max - min))\n            }\n            this.setState({\n                hashMap : updatedHashMap,\n                colorPeriod : updatedColorPeriod,\n                flag : true\n            })\n        })\n    }\n\n    onEachCountry(country, layer){\n        const countryName = country.properties.ADMIN\n        if (this.state.hashMap.has(countryName)) {\n            layer.bindPopup(this.state.hashMap.get(countryName)[0])\n        }\n        // layer.options.fillColor = this.state.color[3]\n        console.log(layer.on)\n        layer.on({\n            mousedown: (event)=>{\n                event.target.setStyle({\n                    color : this.state.color[3],\n                    fillColor : this.state.color[3],\n\n                })\n            }\n        })\n    }\n\n    handleCountryNameChange(event){\n        this.setState({\n            [event.target.name] : event.target.value\n        })\n    }\n\n    handleSearch(){\n        fetch(\"http://localhost:8081/covid19_world_map\", {match : \"GET\"})\n        .then((res)=>res.json())\n        .then((map)=>{\n            var updatedHashMap = new Map()\n            for (var i = 0; i < map.length; i++) {\n                var tmpList = []\n                tmpList.push(map[i].confirmed)\n                tmpList.push(map[i].death)\n                tmpList.push(map[i].recovered)\n                tmpList.push(6)\n                updatedHashMap.set(map[i].country, tmpList)\n            }\n            var updatedColorPeriod = []\n            var min = 0;\n            var max = 0;\n            for (var i = 0; i < map.length; i++) {\n                min = Math.min(min, map[i].confirmed)\n                max = Math.max(max, map[i].confirmed)\n            }\n            for (var i = 0; i < 10; i++) {\n                updatedColorPeriod.push(min + i / 9 * (max - min))\n            }\n            this.setState({\n                hashMap : updatedHashMap,\n                colorPeriod : updatedColorPeriod,\n                flag : true\n            })\n        })\n\n        this.setState({\n            center : []\n        })\n    }\n    \n    render() {\n        return ( \n            <div > \n                <PageNavbar active='covid19_world_map'/>\n                <MapContainer style={{height:\"100vh\"}} zoom={3} center={this.state.center} scrollWheelZoom={false}>\n                <div className='searchBar'>\n                    <input type='text' name=\"countryName\" placeholder=\"Country name\" onChange={this.handleCountryNameChange}></input>\n                    <input type='text' name=\"date\" placeholder=\"Date, e.g. 9/30/20\" onChange={this.handleCountryNameChange}></input>\n                    <button onClick={this.handleSearch}>Search</button>\n                </div>  \n                    <GeoJSON \n                        onEachFeature = {this.onEachCountry}\n                        data={GeojsonData.features}\n                        style={() => ({\n                        color: '#4a83ec',\n                        weight: 0.5,\n                        fillColor: \"white\",\n                        fillOpacity: 1,\n                        })}\n                        \n                    />\n                    \n                </MapContainer>\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}